{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  const [areResults, setAreResults] = useState(true);\n  useEffect(() => {\n    fetch(url).then(res => {\n      if (!res.ok) {\n        throw Error('Error: could not fetch the data for that resource');\n      }\n\n      return res.json();\n    }).then(data => {\n      if (data) {\n        setData(data.photos.photo);\n        setIsPending(false);\n        setError(null);\n        setAreResults(true);\n      } else if (!data) {\n        setAreResults(false);\n      }\n    }).catch(err => {\n      setIsPending(false);\n      setError('Error: ' + err.message);\n    });\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error,\n    areResults\n  };\n};\n\n_s(useFetch, \"LbbyJ5vAt5X14DVQ2x15c/BCBng=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/francanete/Treehouse/unit-11/techdegree-project-11/src/components/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","areResults","setAreResults","fetch","then","res","ok","Error","json","photos","photo","catch","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,IAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,KAAK,CAACT,GAAD,CAAL,CACGU,IADH,CACQC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACC,EAAT,EAAY;AACV,cAAMC,KAAK,CAAC,mDAAD,CAAX;AACD;;AACC,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANH,EAOGJ,IAPH,CAOQT,IAAI,IAAI;AACZ,UAAIA,IAAJ,EAAU;AACRC,QAAAA,OAAO,CAACD,IAAI,CAACc,MAAL,CAAYC,KAAb,CAAP;AACAZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OALD,MAKO,IAAI,CAACP,IAAL,EAAW;AAChBO,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AAEF,KAjBH,EAkBGS,KAlBH,CAkBSC,GAAG,IAAI;AACZd,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,YAAYY,GAAG,CAACC,OAAjB,CAAR;AACD,KArBH;AAsBD,GAvBQ,EAuBN,CAACnB,GAAD,CAvBM,CAAT;AAwBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,KAAnB;AAA0BE,IAAAA;AAA1B,GAAP;AAED,CAhCD;;GAAMR,Q;;AAkCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  const [areResults, setAreResults] = useState(true)\n\n  useEffect(() => {\n    fetch(url)\n      .then(res => {\n        if (!res.ok){\n          throw Error('Error: could not fetch the data for that resource')\n        }\n          return res.json();\n      })\n      .then(data => {\n        if (data) {\n          setData(data.photos.photo);\n          setIsPending(false);\n          setError(null);\n          setAreResults(true);\n        } else if (!data) {\n          setAreResults(false);\n        }\n        \n      })\n      .catch(err => {\n        setIsPending(false);\n        setError('Error: ' + err.message);\n      })\n  }, [url]);\n  return { data, isPending, error, areResults }\n\n}\n \nexport default useFetch;"]},"metadata":{},"sourceType":"module"}