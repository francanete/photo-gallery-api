{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null); // const [isPending, setIsPending] = useState(true);\n\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(url).then(res => {\n      if (!res.ok) {\n        throw Error('Error: could not fetch the data for that resource');\n      }\n\n      return res.json();\n    }).then(data => {\n      // setIsPending(false);\n      setData(data);\n      setError(null);\n    }).catch(err => {\n      // setIsPending(false);\n      setError(err.message);\n    });\n  });\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"XDVXnHzsKW9JpOo48THjIq2+NOI=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/francanete/Treehouse/unit-11/techdegree-project-11/src/components/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","error","setError","fetch","then","res","ok","Error","json","catch","err","message","isPending"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC,CADwB,CAExB;;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAACL,GAAD,CAAL,CACGM,IADH,CACQC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACC,EAAT,EAAY;AACV,cAAMC,KAAK,CAAC,mDAAD,CAAX;AACD;;AACC,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANH,EAOGJ,IAPH,CAOQL,IAAI,IAAI;AACZ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAXH,EAYGO,KAZH,CAYSC,GAAG,IAAI;AACZ;AACAR,MAAAA,QAAQ,CAACQ,GAAG,CAACC,OAAL,CAAR;AACD,KAfH;AAgBD,GAjBQ,CAAT;AAkBA,SAAO;AAAEZ,IAAAA,IAAF;AAAQa,IAAAA,SAAR;AAAmBX,IAAAA;AAAnB,GAAP;AAED,CAzBD;;GAAMJ,Q;;AA2BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  // const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then(res => {\n        if (!res.ok){\n          throw Error('Error: could not fetch the data for that resource')\n        }\n          return res.json();\n      })\n      .then(data => {\n        // setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        // setIsPending(false);\n        setError(err.message);\n      })\n  });\n  return { data, isPending, error }\n\n}\n \nexport default useFetch;"]},"metadata":{},"sourceType":"module"}